<?php

namespace App\Livewire\Clever\Bayers;

use App\Models\Core\Account;
use App\Services\amoCRM\Client;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Select;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Livewire\Component;

class FormOrder extends Component implements HasForms
{
    use InteractsWithForms;

    public function mount(): void
    {
        // –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        $this->form->fill([
            'company_id' => null,
            'product_id' => null,
            'is_advance' => false,
            'date' => now(),
        ]);
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                // --- –ö–ª–∏–µ–Ω—Ç (–ª–µ–Ω–∏–≤—ã–π –ø–æ–∏—Å–∫ –∏–∑ amoCRM) ---
                Select::make('company_id')
                    ->label('–ö–ª–∏–µ–Ω—Ç')
                    ->searchable()
                    ->getSearchResultsUsing(fn (string $search) => $this->searchCompanies($search))
                    ->getOptionLabelUsing(fn ($value) => $this->getCompanyName($value))
                    ->placeholder('–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏')
                    ->required(),

                // --- –ü—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —É—Å–ª—É–≥–∞ (–ª–µ–Ω–∏–≤—ã–π –ø–æ–∏—Å–∫ –∏–∑ amoCRM) ---
                Select::make('product_id')
                    ->label('–£—Å–ª—É–≥–∞ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç')
                    ->searchable()
                    ->getSearchResultsUsing(fn (string $search) => $this->searchProducts($search))
                    ->getOptionLabelUsing(fn ($value) => $this->getProductName($value))
                    ->placeholder('–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —É—Å–ª—É–≥—É / –ø—Ä–æ–¥—É–∫—Ç')
                    ->required(),

                Checkbox::make('is_advance')
                    ->label('–ù—É–∂–µ–Ω –∞–≤–∞–Ω—Å')
                    ->default(false),

                DatePicker::make('date')
                    ->label('–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞')
                    ->required(),
            ]);
    }

    // =============================
    // üß© –ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π –≤ amoCRM
    // =============================
    protected function searchCompanies(string $search): array
    {
        $amoApi = new Client(Account::query()->find(3));

        try {
            // amoCRM SDK –æ–±—ã—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥ search
            $companiesCollection = $amoApi->service->companies;

            foreach ($companiesCollection->toArray() as $companyArray) {

                $this->companies[] = [
                    'id'   => $companyArray['id'],
                    'name' => $companyArray['name'], //–ø—Ä–æ–µ–∫—Ç??
                ];
            }

            return collect($this->companies)
                ->pluck('name', 'id')
                ->toArray();

        } catch (\Throwable $e) {
            logger()->error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–º–ø–∞–Ω–∏–π: ' . $e->getMessage());
            return [];
        }
    }

    protected function getCompanyName($id): ?string
    {
        if (!$id) {
            return null;
        }

        $amoApi = new Client(Account::query()->find(3));

        try {
            $company = $amoApi->service->companies()->find($id);

            return $company?->name ?? null;
        } catch (\Throwable $e) {
            logger()->error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏: ' . $e->getMessage());
            return null;
        }
    }

    // =============================
    // üß© –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ amoCRM
    // =============================
    protected function searchProducts(string $search): array
    {
        $amoApi = new Client(Account::query()->find(3));

        $fields = $amoApi->service->ajax()->get('/api/v4/customers/custom_fields');

        foreach ($fields->_embedded->custom_fields as $key => $field) {

            if ($field->id == 436721) {
                foreach ($field->enums as $enum) {
                    $this->products[] = [
                        'id' => $enum->id,
                        'name' => $enum->value,
                    ];
                }
            }
        }

        return $this->products;
    }

    protected function getProductName($id): ?string
    {
        if (!$id) {
            return null;
        }

//        $amoApi = new Client(Account::query()->find(3));
//
//        try {
//            $fields = $amoApi->service->ajax()->get('/api/v4/customers/custom_fields');
//            $productField = collect($fields->_embedded->custom_fields)
//                ->firstWhere('id', 436721);
//
//            if (!$productField) {
//                return null;
//            }

            return collect($this->products)
                ->firstWhere('id', $id)?->value ?? null;

//        } catch (\Throwable $e) {
//            logger()->error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ' . $e->getMessage());
//            return null;
//        }
    }

    // =============================
    // üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    // =============================
    public function create(): void
    {
        $data = $this->form->getState();

        dump($data); // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

        $this->form->fill();

        session()->flash('success', '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    }

    public function render()
    {
        return view('livewire.clever.bayers.form-order');
    }
}
