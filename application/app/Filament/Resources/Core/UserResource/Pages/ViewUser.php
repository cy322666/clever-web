<?php

namespace App\Filament\Resources\Core\UserResource\Pages;

use App\Filament\Resources\Core\UserResource;
use App\Services\amoCRM\Client;
use App\Services\amoCRM\Models\Account;
use Filament\Notifications\Notification;
use Filament\Pages\Actions;
use Filament\Resources\Pages\ViewRecord;
use Filament\Support\Colors\Color;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Request;

class ViewUser extends ViewRecord
{
    protected static string $resource = UserResource::class;

    protected static ?string $title = 'Аккаунт';

    protected function getActions(): array
    {
        return [
            Actions\Action::make('amocrmAuth')
                ->label('Подключить amoCRM')
                ->color(Color::Red)
                ->action('amocrmAuth'),

            Actions\Action::make('amocrmUpdate')
                ->label('Синхронизировать amoCRM')
                ->color(Color::Orange)
                ->action('amocrmUpdate'),
        ];
    }

    public function mount(int|string $record): void
    {
        parent::mount($record);

        $auth = Request::get('auth');

        if ($auth === '0')
            Notification::make()
                ->title('amoCRM не подключена. Подключите или обратитесь в чат поддержки')
                ->warning()
                ->send();

        if ($auth === '1')
            Notification::make()
                ->title('amoCRM успешно подключена')
                ->success()
                ->send();
    }

    protected function getHeaderWidgets(): array
    {
        return [];
    }

    public function getHeaderWidgetsColumns(): int|array
    {
        return 3; // TODO: Change the autogenerated stub
    }

    public function amocrmAuth(): void
    {
        $account = Auth::user()->account;

        if (!$account->auth) {

            Redirect::to('https://www.amocrm.ru/oauth/?state='.Auth::user()->uuid.'&mode=popup&client_id='.config('services.amocrm.client_id'));

        } else
            Notification::make()
                ->title('amoCRM уже подключена')
                ->warning()
                ->send();
    }

    /**
     * @throws \Exception
     */
    public function amocrmUpdate(): void
    {
        $amoApi = (new Client(Auth::user()->account))->init();

        if ($amoApi->auth) {

            Account::users($amoApi);
            Account::statuses($amoApi);

            Notification::make()
                ->title('Успешно обновлено')
                ->warning()
                ->send();
        }
    }
}
